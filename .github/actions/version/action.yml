# Code generated by craft; DO NOT EDIT.

name: Version
description: Compute the next release version or release it

inputs:
  download_dist:
    description: Whether to build artifact into dist folder or not
    default: "false"
  mode:
    description: |
      Action mode:
        - "dry_run" to only get the next version number
        - "draft" to get the next version number and create draft pull requests and releases
        - "release" to get the next version number and create pull requests, tags and releases
  token:
    description: Github access token
    required: true

outputs:
  branch_sha:
    description: The concerned branch sha256 value
    value: ${{ steps.version.outputs.branch_sha }}
  release:
    description: Whether a release can be made or not
    value: ${{ steps.version.outputs.release }}
  version:
    description: The computed version
    value: ${{ steps.version.outputs.version }}

runs:
  using: composite
  steps:
    - shell: bash
      run: |
        if [ "${MODE}" != "dry_run" ] && [ "${MODE}" != "draft" ] && [ "${MODE}" != "release" ]; then
          echo "invalid input mode '${MODE}', must be one of 'dry_run', 'draft', 'release'"
          exit 2
        fi

        if [ "${MODE}" != "dry_run" ] && [ "${GITHUB_REF_PROTECTED}" != "true" ]; then
          echo "invalid input mode '${MODE}', can't be 'draft' or 'release' when github branch isn't protected"
        fi
      env:
        MODE: ${{ inputs.mode }}
    - uses: actions/download-artifact@v4
      if: ${{ inputs.download_dist == 'true' }}
      with:
        name: build
        path: dist
    - id: release_check
      shell: bash
      run: |
        BRANCH_SHA=$(echo "${GITHUB_REF_NAME}" | sha256sum | cut -c -8)
        echo "branch_sha=${BRANCH_SHA}" >> $GITHUB_OUTPUT

        case "${GITHUB_REF_NAME}" in
          main|master)
            echo "release=true" >> $GITHUB_OUTPUT
            ;;
          beta|staging)
            echo "release=false" >> $GITHUB_OUTPUT
            echo "identifier=beta" >> $GITHUB_OUTPUT
            ;;
          alpha|dev|develop|development)
            echo "release=false" >> $GITHUB_OUTPUT
            echo "identifier=alpha" >> $GITHUB_OUTPUT
            ;;
          next)
            echo "release=false" >> $GITHUB_OUTPUT
            echo "identifier=next" >> $GITHUB_OUTPUT
            ;;
        esac
    # https://github.com/marketplace/actions/release-please-action
    - id: release_please
      uses: googleapis/release-please-action@v4
      with:
        config-file: .github/release-please.config.json
        manifest-file: .github/release-please.manifest.json
        skip-github-pull-request: ${{ inputs.mode == 'dry_run' }} # don't create pull request in dry run mode
        skip-github-release: ${{ inputs.mode == 'dry_run' }} # don't create release in dry run mode
        target-branch: ${{ github.ref_name }}
        token: ${{ inputs.token }}
    - id: version
      shell: bash
      run: |
        echo "branch_sha=${BRANCH_SHA}" >> $GITHUB_OUTPUT
        echo "release=${RELEASE}" >> $GITHUB_OUTPUT
        if [ "${RELEASE}" = "true" ]; then
          echo "version=${VERSION%-*}" >> $GITHUB_OUTPUT
        else
          echo "version=${VERSION/rc/${IDENTIFIER}}" >> $GITHUB_OUTPUT
        fi
      env:
        BRANCH_SHA: ${{ steps.release_check.outputs.branch_sha }}
        IDENTIFIER: ${{ steps.release_check.outputs.identifier }}
        RELEASE: ${{ steps.release_check.outputs.release }}
        VERSION: ${{ steps.release_please.outputs.tag_name }}
    # https://github.com/marketplace/actions/gh-release
    - uses: softprops/action-gh-release@v2
      if: ${{ inputs.mode != 'dry_run' }} # only upload assets when it's draft mode or release mode
      with:
        draft: ${{ inputs.mode != 'release' }}
        files: |
          CHANGELOG.md
          checksums.txt
          dist/*
        generate_release_notes: false
        prerelease: ${{ steps.version.outputs.release != 'true' }}
        tag_name: ${{ steps.version.outputs.version }}
        target_commitish: ${{ github.ref_name }}
        token: ${{ inputs.token }}
    - uses: actions/github-scripts@v7
      if: ${{ inputs.mode != 'dry_run' }} # delete release in case of dry_run since we only desired the next version number
      with:
        script: |
          const release = github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: ${{ github.release_please.outputs.tag_name }}
          })

          github.rest.repos.deleteRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: release.id,
          })

          const pull = github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: ${{ steps.release_please.outputs.pr.number }}
          })

          github.rest.pulls.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: ${{ steps.release_please.outputs.pr.number }},
            body: pull.body.replace("${{ steps.release_please.outputs.tag_name }}", "${{ steps.version.outputs.version }}"),
            state: ${{ inputs.mode != 'release' }} ? "draft" : "open",
            title: pull.title.replace("${{ steps.release_please.outputs.tag_name }}", "${{ steps.version.outputs.version }}"),
          })
    - shell: bash
      run: echo $VERSION
      env:
        VERSION: ${{ steps.version.outputs.version }}