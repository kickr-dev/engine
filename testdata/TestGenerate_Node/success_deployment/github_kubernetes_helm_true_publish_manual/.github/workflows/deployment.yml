# Code generated by craft; DO NOT EDIT.

name: Deployment
run-name: Deployment

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-workflow:
    name: Run Workflow
    runs-on: ubuntu-latest
    permissions:
      actions: read
    env:
      WORKFLOW_RUN: integration
    steps:
      - id: conclusion
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |-
            const branch = process.env.GITHUB_REF_NAME
            const { data } = await github.rest.actions.listWorkflowRuns({
              branch: process.env.GITHUB_REF_NAME,
              owner: context.repo.owner,
              page: 1,
              per_page: 1,
              repo: context.repo.repo,
              workflow_id: process.env.WORKFLOW_NAME,
            })

            const latest = data.workflow_runs.at(0)
            if (!latest) {
              throw new Error(`No '${process.env.WORKFLOW_RUN}' workflow runs found on branch '${branch}'`)
            }
            return latest.conclusion
        env:
          WORKFLOW_NAME: ${{ env.WORKFLOW_RUN }}.yml
      - if: ${{ steps.conclusion.outputs.result != 'success' }}
        id: skip
        run: |-
          echo "Latest '$WORKFLOW_RUN' workflow on '$GITHUB_REF_NAME' isn't in success conclusion: '$WORKFLOW_CONCLUSION'" && exit 1
        env:
          WORKFLOW_CONCLUSION: ${{ steps.conclusion.outputs.result }}

  version:
    name: Version
    runs-on: ubuntu-latest
    needs: run-workflow
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - id: version
        run: |-
          DESCRIBE=$(git describe --tags || echo "v0.0.0")
          echo "version=v${DESCRIBE#v}" >> $GITHUB_OUTPUT
      - run: echo ${VERSION}
        env:
          VERSION: ${{ steps.version.outputs.version }}

  node-build:
    name: Node Build
    runs-on: ubuntu-latest
    needs: version
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: package.json
      - run: bun install --frozen-lockfile
      - run: bun run build
        env:
          VERSION: ${{ needs.version.outputs.version }}
      - uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist
          retention-days: 1

  helm-push:
    name: Helm Push
    runs-on: ubuntu-latest
    needs:
      - version
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4
      # https://github.com/marketplace/actions/helm-tool-installer
      - uses: azure/setup-helm@v4
        with:
          # renovate: datasource=github-tags packageName=helm/helm versioning=semver
          version: v3.16.2
      - run: helm package --version "$VERSION" --app-version "$VERSION" --dependency-update "$HELM_CHART_DIR"
        env:
          HELM_CHART_DIR: chart/
          VERSION: ${{ needs.version.outputs.version }}
      - run: |-
          helm registry login "$HELM_REGISTRY" -u "$HELM_REPO_USERNAME" -p "$HELM_REPO_ACCESS_TOKEN"
          helm push "$HELM_CHART_PATH" "$HELM_PUBLISH_URL"
        env:
          HELM_CHART_PATH: ${{ github.event.repository.name }}-${{ needs.version.outputs.version }}.tgz
          HELM_PUBLISH_URL: oci://ghcr.io/kilianpaquier
          HELM_REGISTRY: ghcr.io
          HELM_REPO_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HELM_REPO_USERNAME: ${{ github.repository_owner }}

  helm-deploy:
    name: Helm Deploy
    runs-on: ubuntu-latest
    needs:
      - helm-push
      - version
    environment: ${{ matrix.environment }}
    strategy:
      fail-fast: false
      # see https://github.com/orgs/community/discussions/26253#discussioncomment-3250989
      # for more information about how to exclude environments depending on branches
      matrix:
        environment:
          - review
          - integration
          - staging
          - production
        production:
          - ${{ github.ref_name == github.event.repository.default_branch }}
        protected:
          - ${{ github.ref_name == github.event.repository.default_branch || github.ref_protected }}
        exclude:
          - environment: review # disable on protected branches
            protected: true
          - environment: integration # disable on non-protected branches
            protected: false
          - environment: staging # disable on non-production branches
            production: false
          - environment: production # disable on non-production branches
            production: false
    steps:
      - uses: actions/checkout@v4
      # https://github.com/marketplace/actions/helm-tool-installer
      - uses: azure/setup-helm@v4
        with:
          # renovate: datasource=github-tags packageName=helm/helm versioning=semver
          version: v3.16.2
      - shell: bash
        run: |-
          args=(--install --kube-context "$ENVIRONMENT" --version "$VERSION" -f "$HELM_CHART_DIR/values.yaml" --set "appVersion=$VERSION")
          [ -z "$HELM_ARGS" ] || args+=("$HELM_ARGS")

          name="$GITHUB_REPOSITORY_NAME-$VERSION"
          [ "$ENVIRONMENT" = "review" ] || name="$GITHUB_REPOSITORY_NAME"

          echo "Running helm upgrade with args '${args[@]}'"
          helm upgrade "${args[@]}" "$name" "${HELM_CHART_URL:-$HELM_CHART_DIR}"
        env:
          ENVIRONMENT: ${{ matrix.environment }}
          GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
          HELM_ARGS: ${{ vars.HELM_ARGS }}
          HELM_CHART_DIR: chart/
          HELM_CHART_URL: oci://ghcr.io/kilianpaquier/craft
          VERSION: ${{ needs.version.outputs.version }}
