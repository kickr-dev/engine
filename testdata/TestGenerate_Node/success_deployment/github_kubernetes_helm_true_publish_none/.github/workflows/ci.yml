# Code generated by craft; DO NOT EDIT.

name: CICD
run-name: CICD

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  push:
    branches:
      - alpha
      - beta
      - dev
      - develop
      - development
      - next
      - staging
      - main
      - master
      - v[0-9]+.x
      - v[0-9]+.[0-9]+.x
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-workflow:
    name: Run Workflow
    runs-on: ubuntu-latest
    # run on branches or pull request not being draft and associated with branches not protected
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false && github.ref_protected != true) }}
    steps:
      - id: skip
        run: echo "Running workflow"

  pre-commit:
    name: Pre-Commit
    runs-on: ubuntu-latest
    needs: run-workflow
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - uses: pre-commit/action@v3.0.1

  version:
    name: Version
    runs-on: ubuntu-latest
    needs: run-workflow
    if: ${{ github.event_name != 'pull_request' }}
    outputs:
      version: ${{ steps.version.outputs.version }}
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - id: version
        run: |-
          DESCRIBE=$(git describe --tags || echo "v0.0.0")
          echo "version=v${DESCRIBE#v}" >> $GITHUB_OUTPUT
      - run: echo ${VERSION}
        env:
          VERSION: ${{ steps.version.outputs.version }}

  helm-lint-test:
    name: Helm Lint & Test
    runs-on: ubuntu-latest
    needs: run-workflow
    steps:
      - uses: actions/checkout@v4
      # https://github.com/marketplace/actions/helm-tool-installer
      - uses: azure/setup-helm@v4
        with:
          version: v3.16.2
      - uses: actions/setup-python@v5
        with:
          check-latest: true
          python-version: 3.x
      # https://github.com/marketplace/actions/helm-chart-testing
      - uses: helm/chart-testing-action@v2
      - id: changed
        run: |-
          changed=$(ct list-changed --chart-dirs "$HELM_CHART_DIR" --target-branch "$TARGET_BRANCH")
          [ -z "$changed" ] || echo "changed=true" >> "$GITHUB_OUTPUT"
        env:
          HELM_CHART_DIR: chart/
          TARGET_BRANCH: ${{ github.event.pull_request.base_ref || github.event.repository.default_branch }}
      - if: ${{ steps.changed.outputs.changed == 'true' }}
        run: ct lint --chart-dirs "$HELM_CHART_DIR" --target-branch "$TARGET_BRANCH"
        env:
          HELM_CHART_DIR: chart/
          TARGET_BRANCH: ${{ github.event.pull_request.base_ref || github.event.repository.default_branch }}

  node-lint:
    name: Node Lint
    runs-on: ubuntu-latest
    needs: run-workflow
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: package.json
      - run: mkdir -p reports/
      - run: bun install --frozen-lockfile
      - run: bun run lint -o reports/node-lint.xslint.json -f json

  node-test:
    name: Node Test
    runs-on: ${{ matrix.os }}
    needs: node-lint
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: package.json
      - run: mkdir -p reports/
      - run: |-
          bun install --frozen-lockfile
          bun test --rerun-each 10 --coverage --coverage-reporter=lcov --coverage-dir=reports --reporter=junit --reporter-outfile="reports/node-test.xunit.xml"

  node-build:
    name: Node Build
    runs-on: ubuntu-latest
    needs:
      - node-test
      - version
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: package.json
      - run: bun install --frozen-lockfile
      - run: bun run build
        env:
          VERSION: ${{ needs.version.outputs.version }}
      - uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist
          retention-days: 1

  helm-deploy:
    name: Helm Deploy
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}
    needs:
      - helm-lint-test
      - node-test
      - version
    environment: ${{ matrix.environment }}
    strategy:
      fail-fast: false
      # see https://github.com/orgs/community/discussions/26253#discussioncomment-3250989
      # for more information about how to exclude environments depending on branches
      matrix:
        environment:
          - review
          - integration
          - staging
          - production
        production:
          - ${{ github.ref_name == github.event.repository.default_branch }}
        protected:
          - ${{ github.ref_name == github.event.repository.default_branch || github.ref_protected }}
        exclude:
          - environment: review # disable on protected branches
            protected: true
          - environment: integration # disable on non-protected branches
            protected: false
          - environment: staging # disable on non-production branches
            production: false
          - environment: production # disable on non-production branches
            production: false
    steps:
      - uses: actions/checkout@v4
      # https://github.com/marketplace/actions/helm-tool-installer
      - uses: azure/setup-helm@v4
        with:
          version: v3.16.2
      - shell: bash
        run: |-
          args=(--install --kube-context "$ENVIRONMENT" --version "$VERSION" -f "$HELM_CHART_DIR/values.yaml" --set "appVersion=$VERSION")
          [ -z "$HELM_ARGS" ] || args+=("$HELM_ARGS")

          name="$GITHUB_REPOSITORY_NAME-$VERSION"
          [ "$ENVIRONMENT" = "review" ] || name="$GITHUB_REPOSITORY_NAME"

          echo "Running helm upgrade with args '${args[@]}'"
          helm upgrade "${args[@]}" "$name" "${HELM_CHART_URL:-$HELM_CHART_DIR}"
        env:
          ENVIRONMENT: ${{ matrix.environment }}
          GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
          HELM_ARGS: ${{ vars.HELM_ARGS }}
          HELM_CHART_DIR: chart/
          VERSION: ${{ needs.helm-check.outputs.version }}
