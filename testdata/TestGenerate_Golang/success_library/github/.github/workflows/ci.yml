# Code generated by craft; DO NOT EDIT.

name: CICD
run-name: CICD

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  push:
    branches:
      - alpha
      - beta
      - dev
      - develop
      - development
      - next
      - staging
      - main
      - master
      - v[0-9]+.x
      - v[0-9]+.[0-9]+.x
  workflow_dispatch:
    inputs:
      release:
        description: Run release job.
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-workflow:
    name: Run Workflow
    runs-on: ubuntu-latest
    # run on branches or pull request not being draft and associated with branches not protected
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false && github.ref_protected != true) }}
    steps:
      - id: skip
        run: echo "Running workflow"

  pre-commit:
    name: Pre-Commit
    runs-on: ubuntu-latest
    needs: run-workflow
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - uses: pre-commit/action@v3.0.1

  go-vulncheck:
    name: Go Vulnerability Check
    runs-on: ubuntu-latest
    needs: run-workflow
    steps:
      - uses: golang/govulncheck-action@v1
        with:
          check-latest: true
          go-package: ./...
          go-version-file: go.mod

  go-lint:
    name: Go Lint
    runs-on: ubuntu-latest
    needs: run-workflow
    permissions:
      checks: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          check-latest: true
          go-version-file: go.mod
          token: ${{ secrets.GITHUB_TOKEN }}
      - run: mkdir -p reports/
      - uses: golangci/golangci-lint-action@v8
        with:
          args: --config .golangci.yml --timeout 240s --allow-parallel-runners --output.checkstyle.path "reports/go-ci-lint.checkstyle.xml" --output.text.path stdout
          version: v2.2
      - uses: actions/upload-artifact@v4
        with:
          name: lint
          path: reports
          retention-days: 1

  go-test:
    name: Go Test
    runs-on: ${{ matrix.os }}
    needs: go-lint
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          check-latest: true
          go-version-file: go.mod
          token: ${{ secrets.GITHUB_TOKEN }}
      - run: mkdir -p reports/
      - if: ${{ matrix.os != 'windows-latest' }}
        run: |-
          set -o pipefail
          go test ./... -v -coverpkg="./..." -covermode="count" -coverprofile="reports/go-coverage.native.out" -timeout=15s | tee "reports/tests.log"
      - if: ${{ matrix.os == 'windows-latest' }}
        run: go test ./... -v -coverpkg="./..." -covermode="count" -coverprofile="reports/go-coverage.native.out" -timeout=15s | tee "reports/tests.log"
      - if: ${{ !cancelled() }}
        shell: bash
        run: |-
          go run github.com/jstemmer/go-junit-report/v2@latest -in "reports/tests.log" -out "reports/go-test.xunit.xml"
          go tool test2json < "reports/tests.log" > "reports/go-test.native.json"
      - uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: reports
          retention-days: 1

  sonar-analysis:
    name: Sonar Analysis
    runs-on: ubuntu-latest
    needs:
      - go-lint
      - go-test
    env:
      SONAR_USER_HOME: .sonar
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: reports
      - uses: actions/cache@v4
        with:
          path: ${{ env.SONAR_USER_HOME }}
          key: sonar-cache
      - if: ${{ github.event_name == 'pull_request' }}
        uses: sonarsource/sonarqube-github-action@v5
        with:
          args: |
            -Dproject.settings=sonar.properties
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.key=${{ github.event.issue.number }}
        env:
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - if: ${{ github.event_name == 'push' }}
        uses: sonarsource/sonarqube-github-action@v5
        with:
          args: |
            -Dproject.settings=sonar.properties
            -Dsonar.branch.name=${{ github.ref_name }}
        env:
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.ref_protected }}
    environment:
      name: release
      url: ${{ steps.environment_url.outputs.environment_url }}
    needs:
      - go-test
    permissions:
      id-token: none
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      # https://github.com/marketplace/actions/action-for-semantic-release
      - id: semrel_version
        uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: ${{ inputs.release == 'false' }}
          semantic_version: 24
          extra_plugins: |-
            @semantic-release/changelog
            @semantic-release/commit-analyzer
            @semantic-release/exec
            @semantic-release/git
            @semantic-release/github
            @semantic-release/release-notes-generator
            conventional-changelog-conventionalcommits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - id: environment_url
        run: |-
          [ -z "$VERSION" ] || echo "environment_url=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/v${VERSION#v}" >> $GITHUB_OUTPUT
        env:
          VERSION: ${{ steps.semrel_version.outputs.new_release_version }}
