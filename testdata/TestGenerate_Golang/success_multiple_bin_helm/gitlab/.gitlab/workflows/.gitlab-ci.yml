# Code generated by craft; DO NOT EDIT.

---
include:

  # semantic-release template
  - project: "to-be-continuous/semantic-release"
    ref: "3"
    file: "templates/gitlab-ci-semrel.yml"

  # pre-commit template
  - project: "to-be-continuous/pre-commit"
    ref: "1"
    file: "templates/gitlab-ci-pre-commit.yml"

  # Docker template
  - project: "to-be-continuous/docker"
    ref: "5"
    file: "templates/gitlab-ci-docker.yml"

  # Helm template
  - project: "to-be-continuous/helm"
    ref: "8"
    file: "templates/gitlab-ci-helm.yml"

  # Go template
  - project: "to-be-continuous/golang"
    ref: "4"
    file: "templates/gitlab-ci-golang.yml"

variables:
  GIT_AUTHOR_EMAIL: $GITLAB_USER_EMAIL
  GIT_COMMITTER_EMAIL: $GITLAB_USER_EMAIL

  SEMREL_AUTO_RELEASE_ENABLED: false
  SEMREL_BRANCHES_REF: /^(master|main|v[0-9]+\.x|v[0-9]+\.[0-9]+\.x|next|alpha|beta|staging|dev|develop|development)$/
  SEMREL_HOOKS_DIR: scripts
  SEMREL_INFO_ON: all
  SEMREL_RELEASE_DISABLED: "true"
  SEMREL_REQUIRED_PLUGINS_FILE: .gitlab/semrel-plugins.txt
  SEMREL_TAG_FORMAT: v$${version}

  PRE_COMMIT_FILE: .pre-commit-config.yaml

  DOCKER_RELEASE_IMAGE: "registry.example.com/path/to/registry:$SEMREL_INFO_NEXT_VERSION"
  DOCKER_SNAPSHOT_IMAGE: "registry.example.com/path/to/registry/snapshot:$SEMREL_INFO_NEXT_VERSION"

  DOCKER_HEALTHCHECK_DISABLED: "true" # https://docs.docker.com/reference/dockerfile/#healthcheck
  DOCKER_KANIKO_IMAGE: "gcr.io/kaniko-project/executor:debug"
  DOCKER_METADATA: |
    --build-arg GIT_REF_NAME=$CI_COMMIT_REF_NAME
    --build-arg GIT_COMMIT=$CI_COMMIT_SHA
    --build-arg VERSION=$SEMREL_INFO_NEXT_VERSION
    --label org.opencontainers.image.created=$CI_JOB_STARTED_AT
    --label org.opencontainers.image.ref.name=$CI_COMMIT_REF_NAME
    --label org.opencontainers.image.revision=$CI_COMMIT_SHA
    --label org.opencontainers.image.version=$SEMREL_INFO_NEXT_VERSION
  DOCKER_RELEASE_EXTRA_TAGS: "latest \\g<major>.\\g<minor> \\g<major"
  DOCKER_SBOM_DISABLED: "true" # https://github.com/anchore/syft
  DOCKER_SEMREL_RELEASE_DISABLED: "true" # handled by docker build and push jobs to avoid too much dependency on semantic-release
  DOCKER_TRIVY_ARGS: "--ignore-unfixed --exit-code 1 --exit-on-eol 1"
  DOCKER_TRIVY_SECURITY_LEVEL_THRESHOLD: "MEDIUM,HIGH,CRITICAL"

  HELM_CHART_DIR: chart/
  HELM_SCRIPTS_DIR: chart/hooks/
  HELM_SEMREL_RELEASE_DISABLED: "true" # version is handled manually
  HELM_TEST_ENABLED: "false"

  HELM_PACKAGE_ARGS: package --version "$SEMREL_INFO_NEXT_VERSION" --app-version "$SEMREL_INFO_NEXT_VERSION" --dependency-update
  HELM_PUBLISH_METHOD: push
  HELM_PUBLISH_ON: all
  HELM_PUBLISH_SNAPSHOT_ENABLED: "false"
  HELM_PUBLISH_STRATEGY: manual
  HELM_PUBLISH_URL: chartmuseum.example.com/path/to/repository

  HELM_REVIEW_ENABLED: "true"
  HELM_INTEG_ENABLED: "true"
  HELM_STAGING_ENABLED: "true"
  HELM_PROD_ENABLED: "true"

  HELM_DEPLOY_ARGS: upgrade --install --version "$SEMREL_INFO_NEXT_VERSION" -f "$HELM_CHART_DIR/values.yaml" --set "appVersion=$SEMREL_INFO_NEXT_VERSION"
  HELM_PROD_DEPLOY_STRATEGY: manual

  HELM_INTEG_APP_NAME: $HELM_BASE_APP_NAME
  HELM_REVIEW_APP_NAME: $HELM_BASE_APP_NAME-$SEMREL_INFO_NEXT_VERSION
  HELM_STAGING_APP_NAME: $HELM_BASE_APP_NAME

  GO_CI_LINT_ARGS: "--config .golangci.yml --timeout 240s --allow-parallel-runners --output.checkstyle.path reports/go-ci-lint.checkstyle.xml --output.text.path stdout"
  GO_CI_LINT_IMAGE: "registry.hub.docker.com/golangci/golangci-lint:latest-alpine"
  GO_IMAGE: "registry.hub.docker.com/library/golang:latest"
  GO_OUTDATED_DISABLED: "false" # https://github.com/psampaz/go-mod-outdated
  GO_SBOM_DISABLED: "true"
  GO_TEST_FLAGS: "-v -coverpkg=./... -covermode=count -timeout=15s"
  GO_TEST_IMAGE: "registry.hub.docker.com/library/golang:latest"

semantic-release-info:
  variables:
    GIT_DEPTH: "0"
  after_script:
    - source "$SEMREL_CONFIG_DIR/semrel.out.env" && rm "$SEMREL_CONFIG_DIR/semrel.out.env"
    - >
      echo "BRANCH_SHA=$(echo "$CI_COMMIT_REF_NAME" | sha256sum | cut -c -8)" >> "$SEMREL_CONFIG_DIR/semrel.out.env"

      if [ -n "$SEMREL_INFO_NEXT_VERSION" ]; then
        echo "SEMREL_INFO_LAST_VERSION=v${SEMREL_INFO_LAST_VERSION#v}" >> "$SEMREL_CONFIG_DIR/semrel.out.env"
        echo "SEMREL_INFO_NEXT_VERSION=v${SEMREL_INFO_NEXT_VERSION#v}" >> "$SEMREL_CONFIG_DIR/semrel.out.env"
        echo "SEMREL_INFO_NEXT_VERSION_TYPE=${SEMREL_INFO_NEXT_VERSION_TYPE}" >> "$SEMREL_CONFIG_DIR/semrel.out.env"
      else
        DESCRIBE=$(git describe --tags || echo "v1.0.0")
        echo "SEMREL_INFO_NEXT_VERSION=v${DESCRIBE#v}" >> "$SEMREL_CONFIG_DIR/semrel.out.env"
        echo "SEMREL_INFO_NEXT_VERSION_TYPE=build" >> "$SEMREL_CONFIG_DIR/semrel.out.env"
      fi
    - cat "$SEMREL_CONFIG_DIR/semrel.out.env"

semantic-release:
  variables:
    GIT_DEPTH: "0"

go-build:
  image: ghcr.io/goreleaser/goreleaser:latest
  rules:
    # https://gitlab.com/to-be-continuous/golang/-/blob/master/templates/gitlab-ci-golang.yml?ref_type=heads#L651
    - if: $GO_TEST_IMAGE != ""
      exists:
        - .goreleaser.yml
  variables:
    VERSION: $SEMREL_INFO_NEXT_VERSION
  script:
    - goreleaser release --clean --config .goreleaser.yml --skip=validate --skip=announce --skip=publish --snapshot
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    paths:
      - dist/
    exclude:
      - dist/*.json
      - dist/*.yaml
      - dist/*/
    expire_in: 1 day
