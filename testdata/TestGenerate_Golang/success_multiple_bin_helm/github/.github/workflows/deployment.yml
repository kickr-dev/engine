# Code generated by craft; DO NOT EDIT.

name: Deployment
run-name: Deployment

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-workflow:
    name: Run Workflow
    runs-on: ubuntu-latest
    permissions:
      actions: read
    steps:
      - id: integration_status
        uses: actions/github-script@v7
        with:
          script: |-
            const { data } = github.rest.actions.listWorkflowRuns({
              branch: process.env.GITHUB_REF_NAME,
              owner: context.repo.owner,
              page: 1,
              per_page: 1,
              repo: context.repo.repo,
              workflow_id: process.env.WORKFLOW_NAME,
            })
            return data[0].status
        env:
          WORKFLOW_NAME: "integration.yml"
      - if: ${{ steps.integration_status.outputs.result != 'success' }}
        run: echo "Previous integration workflow for $GITHUB_REF_NAME isn't in success state" && exit 1

  version:
    name: Version
    runs-on: ubuntu-latest
    needs: run-workflow
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - id: version
        run: |-
          DESCRIBE=$(git describe --tags || echo "v0.0.0")
          echo "version=v${DESCRIBE#v}" >> $GITHUB_OUTPUT
      - run: echo ${VERSION}
        env:
          VERSION: ${{ steps.version.outputs.version }}

  go-build:
    name: Go Build
    runs-on: ubuntu-latest
    needs: version
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          check-latest: true
          go-version-file: go.mod
          token: ${{ secrets.GITHUB_TOKEN }}
      # https://github.com/marketplace/actions/goreleaser-action
      - if: ${{ hashFiles('.goreleaser.yml') != '' }}
        uses: goreleaser/goreleaser-action@v6
        with:
          args: release --clean --config .goreleaser.yml --skip=validate --skip=announce --skip=publish --snapshot
        env:
          VERSION: ${{ needs.version.outputs.version }}
      - uses: actions/upload-artifact@v4
        with:
          name: build
          # order is important to filter unwanted globs after the filter or desired globs
          path: |
            dist/*
            !dist/*.json
            !dist/*.yaml
            !dist/*/
          retention-days: 1

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: version
    permissions:
      packages: none
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - id: image
        run: |-
          image_name="path/to/registry"
          if [[ "${VERSION#v}" =~ ^[0-9]+(\.[0-9]+){2}$ ]]; then
            echo "stable=true" >> $GITHUB_OUTPUT
          else
            echo "stable=false" >> $GITHUB_OUTPUT
            image_name="$image_name/snapshot"
          fi

          image="registry.example.com/$image_name"
          echo "Building docker image with full name '$image'"
          echo "image=$image" >> $GITHUB_OUTPUT

          echo "full_image=$image:$VERSION" >> $GITHUB_OUTPUT
        env:
          VERSION: ${{ needs.version.outputs.version }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.image.outputs.image }}
          labels: |
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            org.opencontainers.image.ref.name=${{ github.ref_name }}
            org.opencontainers.image.version=${{ needs.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
          tags: |
            type=semver,enable=true,pattern={{raw}},value=${{ needs.version.outputs.version }}
            type=semver,enable=${{ steps.image.outputs.stable }},pattern=v{{major}}.{{minor}},value=${{ needs.version.outputs.version }}
            type=semver,enable=${{ steps.image.outputs.stable }},pattern=v{{major}},value=${{ needs.version.outputs.version }}
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: registry.example.com
          username: ${{ github.repository_owner }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            GIT_REF_NAME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.ref.name'] }}
            GIT_COMMIT=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
      - uses: aquasecurity/trivy-action@master
        with:
          exit-code: 0
          format: sarif
          ignore-unfixed: false
          image-ref: ${{ steps.image.outputs.full_image }}
          output: trivy-results.sarif
          severity: MEDIUM,HIGH,CRITICAL
        env:
          TRIVY_USERNAME: ${{ github.repository_owner }}
          TRIVY_PASSWORD: ${{ secrets.REGISTRY_TOKEN }}
      - uses: github/codeql-action/upload-sarif@v3
        with:
          category: docker-trivy
          sarif_file: trivy-results.sarif

  helm-push:
    name: Helm Push
    runs-on: ubuntu-latest
    needs:
      - docker-build
      - version
    permissions:
      packages: none
    steps:
      - uses: actions/checkout@v4
      # https://github.com/marketplace/actions/helm-tool-installer
      - uses: azure/setup-helm@v4
        with:
          # renovate: datasource=github-tags packageName=helm/helm versioning=semver
          version: v3.16.2
      - run: helm package --version "$VERSION" --app-version "$VERSION" --dependency-update "$HELM_CHART_DIR"
        env:
          HELM_CHART_DIR: chart/
          VERSION: ${{ needs.version.outputs.version }}
      - run: |-
          helm plugin install https://github.com/chartmuseum/helm-push
          helm registry login "$HELM_REGISTRY" -u "$HELM_REPO_USERNAME" -p "$HELM_REPO_ACCESS_TOKEN"
          helm cm-push "$HELM_CHART_PATH" "$HELM_PUBLISH_URL"
        env:
          HELM_CHART_PATH: ${{ github.event.repository.name }}-${{ needs.version.outputs.version }}.tgz
          HELM_PUBLISH_URL: chartmuseum.example.com/path/to/repository
          HELM_REGISTRY: chartmuseum.example.com
          HELM_REPO_ACCESS_TOKEN: ${{ secrets.HELM_REPO_ACCESS_TOKEN || secrets.HELM_REPO_PASSWORD }}
          HELM_REPO_AUTH_HEADER: ${{ secrets.HELM_REPO_AUTH_HEADER }}
          HELM_REPO_USE_HTTP: ${{ secrets.HELM_REPO_USE_HTTP }}
          HELM_REPO_USERNAME: ${{ secrets.HELM_REPO_USERNAME || github.repository_owner }}

  helm-deploy:
    name: Helm Deploy
    runs-on: ubuntu-latest
    needs:
      - helm-push
      - version
    environment: ${{ matrix.environment }}
    strategy:
      fail-fast: false
      # see https://github.com/orgs/community/discussions/26253#discussioncomment-3250989
      # for more information about how to exclude environments depending on branches
      matrix:
        environment:
          - review
          - integration
          - staging
          - production
        production:
          - ${{ github.ref_name == github.event.repository.default_branch }}
        protected:
          - ${{ github.ref_name == github.event.repository.default_branch || github.ref_protected }}
        exclude:
          - environment: review # disable on protected branches
            protected: true
          - environment: integration # disable on non-protected branches
            protected: false
          - environment: staging # disable on non-production branches
            production: false
          - environment: production # disable on non-production branches
            production: false
    steps:
      - uses: actions/checkout@v4
      # https://github.com/marketplace/actions/helm-tool-installer
      - uses: azure/setup-helm@v4
        with:
          # renovate: datasource=github-tags packageName=helm/helm versioning=semver
          version: v3.16.2
      - shell: bash
        run: |-
          args=(--install --kube-context "$ENVIRONMENT" --version "$VERSION" -f "$HELM_CHART_DIR/values.yaml" --set "appVersion=$VERSION")
          [ -z "$HELM_ARGS" ] || args+=("$HELM_ARGS")

          name="$GITHUB_REPOSITORY_NAME-$VERSION"
          [ "$ENVIRONMENT" = "review" ] || name="$GITHUB_REPOSITORY_NAME"

          echo "Running helm upgrade with args '${args[@]}'"
          helm upgrade "${args[@]}" "$name" "${HELM_CHART_URL:-$HELM_CHART_DIR}"
        env:
          ENVIRONMENT: ${{ matrix.environment }}
          GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
          HELM_ARGS: ${{ vars.HELM_ARGS }}
          HELM_CHART_DIR: chart/
          HELM_CHART_URL: chartmuseum.example.com/path/to/repository
          VERSION: ${{ needs.version.outputs.version }}
