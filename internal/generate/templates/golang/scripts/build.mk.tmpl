# Code generated by craft; DO NOT EDIT.

CI_PROJECT_PATH := << .ModuleName >>
GCI_CONFIG_PATH := build/ci/.golangci.yml

.PHONY: lint
lint:
	@gci write --skip-generated -s standard -s default -s "Prefix(${CI_PROJECT_PATH})" .
	@golangci-lint run -c ${GCI_CONFIG_PATH} --timeout 120s --fast --sort-results \
		--issues-exit-code 0 \
		--out-format colored-line-number $(ARGS)

.PHONY: test
test: lint
	@go test ./... -count 1

.PHONY: test-race
test-race: lint
	@go test ./... -race

.PHONY: test-cover
test-cover: lint
	@go test ./... -coverpkg=./... -covermode=count -coverprofile=coverage.out

<<- $binaries := dict >>
<<- $_ := map $binaries .Clis .Crons .Jobs .Workers >>

<<- if or .API (gt (len $binaries) 0) >>

.PHONY: buildall
buildall:<< if .API >> build-<< .ProjectName >>-api<< end >><< range $name, $config := $binaries >> build-<< $name >><< end >>

.PHONY:<< if .API >> << .ProjectName >>-api<< end >><< range $name, $config := $binaries >> << $name >><< end >>
build-%:
	@CGO_ENABLED=0 go build -o $* cmd/$*/main.go

.PHONY:<< if .API >> << .ProjectName >>-api<< end >><< range $name, $config := $binaries >> << $name >><< end >>
local-%:
	@go run cmd/$*/main.go

<<- if .Docker >>

build-docker:
	@docker build -t << .ProjectName >> .
<<- end >>
<<- end >>