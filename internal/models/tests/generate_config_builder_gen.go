// Code generated by go-builder-generator (https://github.com/kilianpaquier/go-builder-generator). DO NOT EDIT.

package tests

import (
	"github.com/kilianpaquier/craft/internal/models"
)

// GenerateConfigBuilder represents GenerateConfig's builder.
type GenerateConfigBuilder struct {
	build models.GenerateConfig
}

// NewGenerateConfigBuilder creates a new GenerateConfigBuilder.
func NewGenerateConfigBuilder() *GenerateConfigBuilder {
	return &GenerateConfigBuilder{}
}

// Copy reassigns the builder struct (behind pointer) to a new pointer and returns it.
func (b *GenerateConfigBuilder) Copy() *GenerateConfigBuilder {
	return &GenerateConfigBuilder{b.build}
}

// Build returns built GenerateConfig.
func (b *GenerateConfigBuilder) Build() *models.GenerateConfig {
	result := b.build
	return &result
}

// Binaries sets GenerateConfig's Binaries.
func (b *GenerateConfigBuilder) Binaries(binaries uint8) *GenerateConfigBuilder {
	b.build.Binaries = binaries
	return b
}

// Clis sets GenerateConfig's Clis.
func (b *GenerateConfigBuilder) Clis(clis map[string]struct{}) *GenerateConfigBuilder {
	b.build.Clis = clis
	return b
}

// CraftConfig sets GenerateConfig's CraftConfig.
func (b *GenerateConfigBuilder) CraftConfig(craftConfig models.CraftConfig) *GenerateConfigBuilder {
	b.build.CraftConfig = craftConfig
	return b
}

// Crons sets GenerateConfig's Crons.
func (b *GenerateConfigBuilder) Crons(crons map[string]struct{}) *GenerateConfigBuilder {
	b.build.Crons = crons
	return b
}

// Jobs sets GenerateConfig's Jobs.
func (b *GenerateConfigBuilder) Jobs(jobs map[string]struct{}) *GenerateConfigBuilder {
	b.build.Jobs = jobs
	return b
}

// Languages sets GenerateConfig's Languages.
func (b *GenerateConfigBuilder) Languages(languages map[string]any) *GenerateConfigBuilder {
	b.build.Languages = languages
	return b
}

// Options sets GenerateConfig's Options.
func (b *GenerateConfigBuilder) Options(options models.GenerateOptions) *GenerateConfigBuilder {
	b.build.Options = options
	return b
}

// ProjectHost sets GenerateConfig's ProjectHost.
func (b *GenerateConfigBuilder) ProjectHost(projectHost string) *GenerateConfigBuilder {
	b.build.ProjectHost = projectHost
	return b
}

// ProjectName sets GenerateConfig's ProjectName.
func (b *GenerateConfigBuilder) ProjectName(projectName string) *GenerateConfigBuilder {
	b.build.ProjectName = projectName
	return b
}

// ProjectPath sets GenerateConfig's ProjectPath.
func (b *GenerateConfigBuilder) ProjectPath(projectPath string) *GenerateConfigBuilder {
	b.build.ProjectPath = projectPath
	return b
}

// Workers sets GenerateConfig's Workers.
func (b *GenerateConfigBuilder) Workers(workers map[string]struct{}) *GenerateConfigBuilder {
	b.build.Workers = workers
	return b
}
