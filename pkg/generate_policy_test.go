package engine_test

import (
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	engine "github.com/kickr-dev/engine/pkg"
	"github.com/kickr-dev/engine/pkg/files"
)

func TestShouldGenerate(t *testing.T) {
	t.Run("generated_doesnt_exist", func(t *testing.T) {
		// Arrange
		dest := filepath.Join(t.TempDir(), "invalid.txt")

		// Act
		ok, err := engine.ShouldGenerate(dest, engine.PolicyNone)

		// Assert
		require.NoError(t, err)
		assert.True(t, ok)
	})

	t.Run("not_generated_file", func(t *testing.T) {
		// Arrange
		dest := filepath.Join(t.TempDir(), "file.txt")
		err := os.WriteFile(dest, []byte("not generated"), files.RwRR)
		require.NoError(t, err)

		// Act
		ok, err := engine.ShouldGenerate(dest, engine.PolicyNone)

		// Assert
		require.NoError(t, err)
		assert.False(t, ok)
	})

	t.Run("generated_folder", func(t *testing.T) {
		// Arrange
		dest := filepath.Join(t.TempDir(), "folder")
		require.NoError(t, os.Mkdir(dest, files.RwxRxRxRx))

		// Act
		_, err := engine.ShouldGenerate(dest, engine.PolicyNone)

		// Assert
		assert.Error(t, err)
	})

	t.Run("generated_no_lines", func(t *testing.T) {
		// Arrange
		dest := filepath.Join(t.TempDir(), "file.txt")
		file, err := os.Create(dest)
		require.NoError(t, err)
		require.NoError(t, file.Close())

		// Act
		ok, err := engine.ShouldGenerate(dest, engine.PolicyNone)

		// Assert
		require.NoError(t, err)
		assert.True(t, ok)
	})

	t.Run("generated_first_line", func(t *testing.T) {
		// Arrange
		dest := filepath.Join(t.TempDir(), "file.txt")
		err := os.WriteFile(dest, []byte("// Code generated by kickr; DO NOT EDIT."), files.RwRR)
		require.NoError(t, err)

		// Act
		ok, err := engine.ShouldGenerate(dest, engine.PolicyNone)

		// Assert
		require.NoError(t, err)
		assert.True(t, ok)
	})

	t.Run("generated_md_comment", func(t *testing.T) {
		// Arrange
		dest := filepath.Join(t.TempDir(), "file.txt")
		err := os.WriteFile(dest, []byte("<!-- Code generated by kickr; DO NOT EDIT. -->"), files.RwRR)
		require.NoError(t, err)

		// Act
		ok, err := engine.ShouldGenerate(dest, engine.PolicyNone)

		// Assert
		require.NoError(t, err)
		assert.True(t, ok)
	})

	t.Run("generated_second_line", func(t *testing.T) {
		// Arrange
		dest := filepath.Join(t.TempDir(), "file.txt")
		err := os.WriteFile(dest, []byte("\n# Code generated by kickr; DO NOT EDIT."), files.RwRR)
		require.NoError(t, err)

		// Act
		ok, err := engine.ShouldGenerate(dest, engine.PolicyNone)

		// Assert
		require.NoError(t, err)
		assert.True(t, ok)
	})

	t.Run("generated_json", func(t *testing.T) {
		// Arrange
		dest := filepath.Join(t.TempDir(), "file.txt")
		err := os.WriteFile(dest, []byte(`{
			"//": "Code generated by kickr; DO NOT EDIT.",
		}`), files.RwRR)
		require.NoError(t, err)

		// Act
		ok, err := engine.ShouldGenerate(dest, engine.PolicyNone)

		// Assert
		require.NoError(t, err)
		assert.True(t, ok)
	})
}
