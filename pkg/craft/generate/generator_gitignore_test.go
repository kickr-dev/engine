package generate_test

import (
	"bytes"
	"net/http"
	"os"
	"path/filepath"
	"testing"

	"github.com/jarcoal/httpmock"
	compare "github.com/kilianpaquier/compare/pkg"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	craft "github.com/kilianpaquier/craft/pkg/craft/configuration"
	"github.com/kilianpaquier/craft/pkg/craft/generate"
	"github.com/kilianpaquier/craft/pkg/engine/generator"
)

func TestGeneratorGitignore(t *testing.T) {
	ctx := t.Context()

	httpmock.Activate()
	t.Cleanup(httpmock.DeactivateAndReset)
	gen := generate.GeneratorGitignore(http.DefaultClient)

	t.Run("error_http_call", func(t *testing.T) {
		// Arrange
		httpmock.RegisterResponder(http.MethodGet, "https://www.toptal.com/developers/gitignore/api/dotenv",
			httpmock.NewStringResponder(http.StatusInternalServerError, "some error"))

		// Act
		err := gen(ctx, t.TempDir(), craft.Config{})

		// Assert
		assert.ErrorContains(t, err, "download gitignore")
	})

	t.Run("success", func(t *testing.T) {
		// Arrange
		destdir := t.TempDir()

		httpmock.RegisterResponder(http.MethodGet, "https://www.toptal.com/developers/gitignore/api/go,dotenv,sonar,sonarqube",
			httpmock.NewStringResponder(http.StatusOK, "some content"))

		config := craft.Config{
			CI:        &craft.CI{Options: []string{craft.Sonar}},
			Languages: map[string]any{"go": nil},
		}

		// Act
		err := gen(ctx, destdir, config)

		// Assert
		require.NoError(t, err)
		content, err := os.ReadFile(filepath.Join(destdir, generator.FileGitignore))
		require.NoError(t, err)
		assert.Equal(t, `# Code generated by craft; DO NOT EDIT.

# Various build / compile directories
dist/
reports/

# Binaries for programs

some content`, string(bytes.ReplaceAll(content, compare.Carriage, []byte{})))
	})
}
