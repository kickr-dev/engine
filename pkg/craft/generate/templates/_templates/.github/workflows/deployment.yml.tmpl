# Code generated by craft; DO NOT EDIT.

name: Deployment
run-name: Deployment

<<- $golang := hasKey .Languages "go" >>
<<- $gobuild := and $golang (gt .Binaries 0) >>

<<- $hugo := hasKey .Languages "hugo" >>

<<- $node := hasKey .Languages "node" >>
<<- $nodebuild := and $node (gt .Binaries 0) >>
<<- $nodepublish := and $node (not (get .Languages "node").Private) >>

<<- $pages := and (.IsDeployment "pages") (or $nodebuild $hugo) >>
<<- $netlify := and (.IsDeployment "netlify") (or $nodebuild $hugo) >>

<<- $wrun := or .IsHelmPublishAuto .IsDeploymentAuto .IsReleaseAuto >>

on:
<<- if $wrun >>
  workflow_run:
    workflows:
      - Integration
    types:
      - completed
    branches:
      - alpha
      - beta
      - dev
      - develop
      - development
      - next
      - staging
      - main
      - master
      - v[0-9]+.x
      - v[0-9]+.[0-9]+.x
<<- end >>
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-workflow:
    name: Run Workflow
    runs-on: ubuntu-latest
    permissions:
      actions: read
    steps:
<<- if $wrun >>
      - if: ${{ github.event_name == 'workflow_dispatch' }}
        id: integration_status
<<- else >>
      - id: integration_status
<<- end >>
        uses: actions/github-script@v7
        with:
          script: |-
            const { data } = github.rest.actions.listWorkflowRuns({
              branch: process.env.GITHUB_REF_NAME,
              owner: context.repo.owner,
              page: 1,
              per_page: 1,
              repo: context.repo.repo,
              workflow_id: process.env.WORKFLOW_NAME,
            })
            return data[0].status
        env:
          WORKFLOW_NAME: "integration.yml"
<<- if $wrun >>
      - if: ${{ (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion != 'success') || (github.event_name == 'workflow_dispatch' && steps.integration_status.outputs.result != 'success') }}
<<- else >>
      - if: ${{ steps.integration_status.outputs.result != 'success' }}
<<- end >>
        run: echo "Previous integration workflow for $GITHUB_REF_NAME isn't in success state" && exit 1

  version:
    name: Version
    runs-on: ubuntu-latest
    needs: run-workflow
    outputs:
      version: ${{ steps.version.outputs.version }}
<<- if .CI.Release >>
    permissions:
<<- if eq .CI.Auth.Release "github-token" >>
      contents: write
      issues: write
      pull-requests: write
<<- end >>
      id-token: << $node | ternary "write" "none" >>
<<- end >>
    steps:
<<- if .CI.Release >>
<<- if eq .CI.Auth.Release "github-app" >>
      - id: app_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_PRIVATE_KEY }}
<<- end >>
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
<<- if ne .CI.Auth.Release "github-token" >>
          persist-credentials: false
<<- end >>
<<- if eq .CI.Auth.Release "github-app" >>
          token: ${{ steps.app_token.outputs.token }}
<<- end >>
      # https://github.com/marketplace/actions/action-for-semantic-release
      - id: semrel_version
        # renovate: datasource=git-refs packageName=https://github.com/cycjimmy/semantic-release-action depName=cycjimmy/semantic-release-action versioning=docker
        uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: true
          # renovate: datasource=github-tags packageName=semantic-release/semantic-release versioning=docker
          semantic_version: 24
          extra_plugins: |-
            @semantic-release/changelog
            @semantic-release/commit-analyzer
            @semantic-release/exec
            @semantic-release/git
            @semantic-release/github
            @semantic-release/release-notes-generator
            conventional-changelog-conventionalcommits
<<- if $node >>
            @semantic-release/npm
<<- end >>
<<- if .License >>
            semantic-release-license
<<- end >>
<<- if .CI.Release.Backmerge >>
            @kilianpaquier/semantic-release-backmerge
<<- end >>
        env:
<<- if eq .CI.Auth.Release "github-app" >>
          GITHUB_TOKEN: ${{ steps.app_token.outputs.token }}
<<- else if eq .CI.Auth.Release "personal-token" >>
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
<<- else >>
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
<<- end >>
<<- if $nodepublish >>
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
<<- end >>
      - id: version
        run: |-
          if [ -n "$SEMREL_INFO_NEXT_VERSION" ]; then
            echo "version=v${SEMREL_INFO_NEXT_VERSION#v}" >> $GITHUB_OUTPUT
          else
            DESCRIBE=$(git describe --tags || echo "v0.0.0")
            echo "version=v${DESCRIBE#v}" >> $GITHUB_OUTPUT
          fi
        env:
          SEMREL_INFO_NEXT_VERSION: ${{ steps.semrel_version.outputs.new_release_version }}
<<- else >>
      - uses: actions/checkout@v4
      - id: version
        run: |-
          DESCRIBE=$(git describe --tags || echo "v0.0.0")
          echo "version=v${DESCRIBE#v}" >> $GITHUB_OUTPUT
<<- end >>
      - run: echo ${VERSION}
        env:
          VERSION: ${{ steps.version.outputs.version }}

<<- if $gobuild >><< template "golang" . >><<- end >>
<<- if $hugo >><< template "hugo" . >><<- end >>
<<- if $nodebuild >><< template "node" . >><<- end >>

<<- if .CI.Docker >><< template "docker" . >><<- end >>
<<- if and .CI.Helm (or .HasHelmPublish (.IsDeployment "kubernetes")) >><< template "helm" . >><<- end >>

<<- if or $netlify $pages >><< template "static" . >><<- end >>

<<- if .CI.Release >>

<<- $needs := list >>
<<- if .CI.Docker >><<- $needs = append $needs "docker-build" >><<- end >>
<<- if $gobuild >><<- $needs = append $needs "go-build" >><<- end >>
<<- if $hugo >><<- $needs = append $needs "hugo-build" >><<- end >>
<<- if $netlify >><<- $needs = append $needs "netlify" >><<- end >>
<<- if $nodebuild >><<- $needs = append $needs "node-build" >><<- end >>
<<- if $pages >><<- $needs = append $needs "pages" >><<- end >>

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{<< and (not .CI.Release.Auto) (or .IsHelmPublishAuto .IsDeploymentAuto) | ternary "github.event_name == 'workflow_dispatch' &&" "" >> github.ref_protected }}
<<- if gt (len $needs) 0 >>
    needs:
<<- range $needs >>
      - << . >>
<<- end >>
<<- end >>
    environment:
      name: release
      url: ${{ steps.environment_url.outputs.environment_url }}
    permissions:
<<- if eq .CI.Auth.Release "github-token" >>
      contents: write
      issues: write
      pull-requests: write
  <<- end >>
      id-token: << $node | ternary "write" "none" >>
    steps:
<<- if eq .CI.Auth.Release "github-app" >>
      - id: app_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_PRIVATE_KEY }}
<<- end >>
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
<<- if ne .CI.Auth.Release "github-token" >>
          persist-credentials: false
<<- end >>
<<- if eq .CI.Auth.Release "github-app" >>
          token: ${{ steps.app_token.outputs.token }}
<<- end >>
<<- if gt .Binaries 0 >>
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: dist
<<- end >>
      # https://github.com/marketplace/actions/action-for-semantic-release
      - id: semrel_version
        # renovate: datasource=git-refs packageName=https://github.com/cycjimmy/semantic-release-action depName=cycjimmy/semantic-release-action versioning=docker
        uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: ${{ inputs.release == 'false' }}
          # renovate: datasource=github-tags packageName=semantic-release/semantic-release versioning=docker
          semantic_version: 24
          extra_plugins: |-
            @semantic-release/changelog
            @semantic-release/commit-analyzer
            @semantic-release/exec
            @semantic-release/git
            @semantic-release/github
            @semantic-release/release-notes-generator
            conventional-changelog-conventionalcommits
<<- if $node >>
            @semantic-release/npm
<<- end >>
<<- if .License >>
            semantic-release-license
<<- end >>
<<- if .CI.Release.Backmerge >>
            @kilianpaquier/semantic-release-backmerge
<<- end >>
        env:
<<- if eq .CI.Auth.Release "github-app" >>
          GITHUB_TOKEN: ${{ steps.app_token.outputs.token }}
<<- else if eq .CI.Auth.Release "personal-token" >>
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
<<- else >>
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
<<- end >>
<<- if $nodepublish >>
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
<<- end >>
      - id: environment_url
        run: |-
          [ -z "$VERSION" ] || echo "environment_url=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/v${VERSION#v}" >> $GITHUB_OUTPUT
        env:
          VERSION: ${{ steps.semrel_version.outputs.new_release_version }}
<<- end >>
