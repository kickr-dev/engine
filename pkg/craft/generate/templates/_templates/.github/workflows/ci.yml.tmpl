# Code generated by craft; DO NOT EDIT.

name: CICD
run-name: CICD

<<- $golang := hasKey .Languages "go" >>
<<- $hugo := hasKey .Languages "hugo" >>
<<- $node := hasKey .Languages "node" >>
<<- $shell := hasKey .Languages "shell" >>

<<- $nodebuild := and $node (gt .Binaries 0) >>
<<- $nodepublish := and $node (not (get .Languages "node").Private) >>

<<- $pages := and (.IsDeployment "pages") (or $nodebuild $hugo) >>
<<- $netlify := and (.IsDeployment "netlify") (or $nodebuild $hugo) >>

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  push:
    branches:
      - alpha
      - beta
      - dev
      - develop
      - development
      - next
      - staging
      - main
      - master
      - v[0-9]+.x
      - v[0-9]+.[0-9]+.x
  workflow_dispatch:
<<- if .CI.Release >>
    inputs:
      release:
        description: Run release job.
        type: boolean
<<- end >>

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

<<- $checkout := list >>

<<- if .CI.Release >>
<<- if eq .CI.Auth.Release "github-app" >><<- $checkout = append $checkout "token: ${{ steps.app_token.outputs.token }}">><<- end >>
<<- if ne .CI.Auth.Release "github-token" >><<- $checkout = append $checkout "persist-credentials: false">><<- end >>
<<- end >>

jobs:
  run-workflow:
    name: Run Workflow
    runs-on: ubuntu-latest
    # run on branches or pull request not being draft and associated with branches not protected
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false && github.ref_protected != true) }}
    steps:
      - id: skip
        run: echo "Running workflow"

<<- if not (has "pre-commit" .Exclude) >>

  pre-commit:
    name: Pre-Commit
    runs-on: ubuntu-latest
    needs: run-workflow
    permissions:
      contents: write
    steps:
      <<- /* renovate: datasource=github-tags versioning=regex:^(?<major>\\d+)$ */>>
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      <<- /* renovate: datasource=github-tags versioning=regex:^(?<major>\\d+)$ */>>
      - uses: actions/setup-python@v5
        with:
          <<- /* renovate: datasource=github-tags packageName=actions/python-versions versioning=regex:(?<major>\\d+)\\.x$ */>>
          python-version: 3.x
      <<- /* renovate: datasource=github-tags versioning=semver */>>
      - uses: pre-commit/action@v3.0.1
<<- if has "pre-commit:auto-commit" .CI.Options >>
      - if: ${{ !cancelled() }}
        # see https://github.com/marketplace/actions/git-auto-commit
        <<- /* renovate: datasource=github-tags versioning=regex:^(?<major>\\d+)$ */>>
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "fix(commit): pre-commit autofixes [skip ci]"
<<- end >>
<<- end >>

<<- if $shell >>

  shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    needs: run-workflow
    steps:
      <<- /* renovate: datasource=github-tags versioning=regex:^(?<major>\\d+)$ */>>
      - uses: actions/checkout@v4
      # see https://github.com/marketplace/actions/shellcheck
      <<- /* renovate: datasource=github-tags versioning=semver */>>
      - uses: ludeeus/action-shellcheck@2.0.0
        with:
          check_together: "yes"
<<- end >>

<<- if or (gt .Binaries 0) $hugo .CI.Docker >>

  version:
    name: Version
    runs-on: ubuntu-latest
    needs: run-workflow
    if: ${{ github.event_name != 'pull_request' }}
    outputs:
      version: ${{ steps.version.outputs.version }}
    permissions:
<<- if eq .CI.Auth.Release "github-token" >>
      contents: write
      issues: write
      pull-requests: write
<<- end >>
      id-token: << $node | ternary "write" "none" >>
    steps:
<<- if .CI.Release >>
<<- if eq .CI.Auth.Release "github-app" >>
      - id: app_token
        <<- /* renovate: datasource=github-tags versioning=regex:^(?<major>\\d+)$ */>>
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.RELEASE_APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
<<- end >>
      <<- /* renovate: datasource=github-tags versioning=regex:^(?<major>\\d+)$ */>>
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
<<- range $checkout >>
          << . >>
<<- end >>
      # https://github.com/marketplace/actions/action-for-semantic-release
      - id: semrel_version
        <<- /* renovate: datasource=github-tags versioning=regex:^(?<major>\\d+)$ */>>
        uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: true
          <<- /* renovate: datasource=github-tags packageName=semantic-release/semantic-release versioning=regex:^(?<major>\\d+)$ */>>
          semantic_version: 24
          <<- template "release-args" . >>
      - id: version
        run: |-
          if [ -n "$SEMREL_INFO_NEXT_VERSION" ]; then
            echo "version=v${SEMREL_INFO_NEXT_VERSION#v}" >> $GITHUB_OUTPUT
          else
            DESCRIBE=$(git describe --tags || echo "v0.0.0")
            echo "version=v${DESCRIBE#v}" >> $GITHUB_OUTPUT
          fi
        env:
          SEMREL_INFO_NEXT_VERSION: ${{ steps.semrel_version.outputs.new_release_version }}
<<- else >>
      <<- /* renovate: datasource=github-tags versioning=regex:^(?<major>\\d+)$ */>>
      - uses: actions/checkout@v4
      - id: version
        run: |-
          DESCRIBE=$(git describe --tags || echo "v0.0.0")
          echo "version=v${DESCRIBE#v}" >> $GITHUB_OUTPUT
<<- end >>
      - run: echo ${VERSION}
        env:
          VERSION: ${{ steps.version.outputs.version }}
<<- end >>

<<- if $golang >><< template "golang" . >><<- end >>
<<- if .CI.Helm >><< template "helm-base" . >><<- end >>
<<- if $hugo >><< template "hugo" . >><<- end >>
<<- if $node >><< template "node" . >><<- end >>

<<- if has "sonar" .CI.Options >>

  sonar-analysis:
    name: Sonar Analysis
    runs-on: ubuntu-latest
    needs:
<<- if $golang >>
      - go-lint
      - go-test
<<- end >>
<<- if $node >>
      - node-lint
      - node-test
<<- end >>
    env:
      SONAR_USER_HOME: .sonar
    steps:
      <<- /* renovate: datasource=github-tags versioning=regex:^(?<major>\\d+)$ */>>
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      <<- /* renovate: datasource=github-tags versioning=regex:^(?<major>\\d+)$ */>>
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: reports
      <<- /* renovate: datasource=github-tags versioning=regex:^(?<major>\\d+)$ */>>
      - uses: actions/cache@v4
        with:
          path: ${{ env.SONAR_USER_HOME }}
          key: sonar-cache
      - if: ${{ github.event_name == 'pull_request' }}
        <<- /* renovate: datasource=github-tags versioning=regex:^(?<major>\\d+)$ */>>
        with:
          args: |
            -Dproject.settings=sonar.properties
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.key=${{ github.event.issue.number }}
        env:
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - if: ${{ github.event_name == 'push' }}
        <<- /* renovate: datasource=github-tags versioning=regex:^(?<major>\\d+)$ */>>
        with:
          args: |
            -Dproject.settings=sonar.properties
            -Dsonar.branch.name=${{ github.ref_name }}
        env:
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
<<- end >>

<<- if .CI.Docker >><< template "docker" . >><<- end >>
<<- if and .CI.Helm (or .HasHelmPublish (.IsDeployment "kubernetes")) >><< template "helm-deploy" . >><<- end >>

<<- if or $netlify $pages >><< template "static-deploy" . >><<- end >>

<<- if .CI.Release >>

  release:
    name: Release
    runs-on: ubuntu-latest
<<- if .CI.Release.Auto >>
    if: ${{ github.event_name != 'pull_request' && github.ref_protected }}
<<- else >>
    if: ${{ github.event_name == 'workflow_dispatch' && github.ref_protected }}
<<- end >>
    environment:
      name: release
      url: ${{ steps.environment_url.outputs.environment_url }}
    needs:
      <<- template "needs" . >>
<<- if .CI.Docker >>
      - docker-build
<<- end >>
<<- if $netlify >>
      - netlify
<<- end >>
<<- if $pages >>
      - pages
<<- end >>
    permissions:
<<- if eq .CI.Auth.Release "github-token" >>
      contents: write
      issues: write
      pull-requests: write
<<- end >>
      id-token: << $node | ternary "write" "none" >>
    steps:
<<- if eq .CI.Auth.Release "github-app" >>
      - id: app_token
        <<- /* renovate: datasource=github-tags versioning=regex:^(?<major>\\d+)$ */>>
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.RELEASE_APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
<<- end >>
      <<- /* renovate: datasource=github-tags versioning=regex:^(?<major>\\d+)$ */>>
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
<<- range $checkout >>
          << . >>
<<- end >>
<<- if gt .Binaries 0 >>
      <<- /* renovate: datasource=github-tags versioning=regex:^(?<major>\\d+)$ */>>
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: dist
<<- end >>
      # https://github.com/marketplace/actions/action-for-semantic-release
      - id: semrel_version
        <<- /* renovate: datasource=github-tags versioning=regex:^(?<major>\\d+)$ */>>
        uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: ${{ inputs.release == 'false' }}
          <<- /* renovate: datasource=github-tags packageName=semantic-release/semantic-release versioning=regex:^(?<major>\\d+)$ */>>
          semantic_version: 24
          <<- template "release-args" . >>
      - id: environment_url
        run: |-
          [ -z "$VERSION" ] || echo "environment_url=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/v${VERSION#v}" >> $GITHUB_OUTPUT
        env:
          VERSION: ${{ steps.semrel_version.outputs.new_release_version }}
<<- end >>
