# Code generated by craft; DO NOT EDIT.

name: Integration
run-name: Integration

<<- $golang := hasKey .Languages "go" >>
<<- $node := hasKey .Languages "node" >>
<<- $shell := and (not (has "shell" .Exclude)) (gt (len (glob "*.*sh")) 0) >>

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  push:
    branches:
      - alpha
      - beta
      - dev
      - develop
      - development
      - next
      - staging
      - main
      - master
      - v[0-9]+.x
      - v[0-9]+.[0-9]+.x

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-workflow:
    name: Run Workflow
    runs-on: ubuntu-latest
    # run on branches or pull request not being draft and associated with branches not protected
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && !github.event.pull_request.draft && !github.ref_protected) }}
    steps:
      - run: echo "Running workflow"

<<- if not (has "pre-commit" .Exclude) >>

  pre-commit:
    name: Pre-Commit
    runs-on: ubuntu-latest
    needs: run-workflow
<<- if has "pre-commit:auto-commit" .CI.Options >>
    permissions:
      contents: write
<<- end >>
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - uses: actions/setup-python@v5
        with:
          # renovate: datasource=github-tags packageName=actions/python-versions versioning=npm
          python-version: 3.x
      - uses: pre-commit/action@v3.0.1
<<- if has "pre-commit:auto-commit" .CI.Options >>
      - if: ${{ !cancelled() }}
        # https://github.com/marketplace/actions/git-auto-commit
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "fix(commit): pre-commit autofixes [skip ci]"
<<- end >>
<<- end >>

<<- if $shell >>

  shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    needs: run-workflow
    steps:
      - uses: actions/checkout@v4
      # https://github.com/marketplace/actions/shellcheck
      - uses: ludeeus/action-shellcheck@2.0.0
        with:
          check_together: "yes"
<<- end >>

<<- if .CI.Docker >>

  docker-hadolint:
    name: Docker Hadolint
    runs-on: ubuntu-latest
    needs: run-workflow
    permissions:
      pull-requests: write
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          format: sarif
          output-file: hadolint-results.sarif
      - if: ${{ !cancelled() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: hadolint-results.sarif
          category: docker-hadolint
<<- end >>

<<- if .CI.Helm >>

  helm-lint-test:
    name: Helm Lint & Test
    runs-on: ubuntu-latest
    needs: run-workflow
    steps:
      - uses: actions/checkout@v4
      # https://github.com/marketplace/actions/helm-tool-installer
      - uses: azure/setup-helm@v4
        with:
          # renovate: datasource=github-tags packageName=helm/helm versioning=semver
          version: v3.18.4
      # https://github.com/marketplace/actions/setup-python
      - uses: actions/setup-python@v5
        with:
          check-latest: true
          # renovate: datasource=github-tags packageName=actions/python-versions versioning=npm
          python-version: 3.x
      # https://github.com/marketplace/actions/helm-chart-testing
      - uses: helm/chart-testing-action@v2
      - id: changed
        run: |-
          changed=$(ct list-changed --chart-dirs "$HELM_CHART_DIR" --target-branch "$TARGET_BRANCH")
          [ -z "$changed" ] || echo "changed=true" >> "$GITHUB_OUTPUT"
        env:
          HELM_CHART_DIR: chart/
          TARGET_BRANCH: ${{ github.event.pull_request.base_ref || github.event.repository.default_branch }}
      - if: ${{ steps.changed.outputs.changed == 'true' }}
        run: ct lint --chart-dirs "$HELM_CHART_DIR" --target-branch "$TARGET_BRANCH"
        env:
          HELM_CHART_DIR: chart/
          TARGET_BRANCH: ${{ github.event.pull_request.base_ref || github.event.repository.default_branch }}
<<- end >>

<<- if $golang >><< template "golang" . >><<- end >>
<<- if $node >><< template "node" . >><<- end >>

<<- if has "sonar" .CI.Options >>

  sonar-analysis:
    name: Sonar Analysis
    runs-on: ubuntu-latest
    needs:
<<- if $golang >>
      - go-lint
      - go-test
<<- end >>
<<- if $node >>
      - node-lint
      - node-test
<<- end >>
    env:
      SONAR_USER_HOME: .sonar
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: reports
      - uses: actions/cache@v4
        with:
          path: ${{ env.SONAR_USER_HOME }}
          key: sonar-cache
      - if: ${{ github.event_name == 'pull_request' }}
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          args: |
            -Dproject.settings=sonar.properties
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.key=${{ github.event.issue.number }}
        env:
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - if: ${{ github.event_name == 'push' }}
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          args: |
            -Dproject.settings=sonar.properties
            -Dsonar.branch.name=${{ github.ref_name }}
        env:
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
<<- end >>
