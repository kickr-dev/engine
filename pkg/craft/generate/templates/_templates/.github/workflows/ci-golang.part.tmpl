jobs:
<<- define "golang" >>

  go-vulncheck:
    name: Go Vulnerability Check
    runs-on: ubuntu-latest
    needs: run-workflow
    steps:
      - uses: golang/govulncheck-action@v1
        with:
          check-latest: true
          go-package: ./...
          go-version-file: go.mod

  go-lint:
    name: Go Lint
    runs-on: ubuntu-latest
    needs: run-workflow
    permissions:
      checks: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          check-latest: true
          go-version-file: go.mod
          token: ${{ secrets.GITHUB_TOKEN }}
      - run: mkdir -p reports/
      - uses: golangci/golangci-lint-action@v8
        with:
          args: --config .golangci.yml --timeout 240s --allow-parallel-runners --output.checkstyle.path "reports/go-ci-lint.checkstyle.xml" --output.text.path stdout
<<- if has "sonar" .CI.Options >>
      - uses: actions/upload-artifact@v4
        with:
          name: lint
          path: reports
          retention-days: 1
<<- end >>

  go-test:
    name: Go Test
    runs-on: ${{ matrix.os }}
    needs: go-lint
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          check-latest: true
          go-version-file: go.mod
          token: ${{ secrets.GITHUB_TOKEN }}
      - run: mkdir -p reports/
      - run: |-
          go test ./... -v -coverpkg="./..." -covermode="count" -coverprofile="reports/go-coverage.native.out" -timeout=15s | tee "reports/tests.log"
      - if: ${{ !cancelled() }}
        shell: bash
        run: |-
          go run github.com/jstemmer/go-junit-report/v2@latest -in "reports/tests.log" -out "reports/go-test.xunit.xml"
          go tool test2json < "reports/tests.log" > "reports/go-test.native.json"
<<- if has "codecov" .CI.Options >>
      - if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          codecov_yml_path: .codecov.yml
          disable_search: true
          env_vars: OS
          fail_ci_if_error: false
          files: reports/go-test.xunit.xml
          flags: ${{ matrix.os }}
          slug: ${{ github.repository }}
          token: ${{ secrets.CODECOV_TOKEN }}
        env:
          OS: ${{ matrix.os }}
      - uses: codecov/codecov-action@v5
        with:
          codecov_yml_path: .codecov.yml
          disable_search: true
          env_vars: OS
          fail_ci_if_error: false
          files: reports/go-coverage.native.out
          flags: ${{ matrix.os }}
          slug: ${{ github.repository }}
          token: ${{ secrets.CODECOV_TOKEN }}
        env:
          OS: ${{ matrix.os }}
<<- end >>
<<- if has "sonar" .CI.Options >>
      - uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: reports
          retention-days: 1
<<- end >>

<<- if gt .Binaries 0 >>

  go-build:
    name: Go Build
    runs-on: ubuntu-latest
    needs:
      - go-test
      - version
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          check-latest: true
          go-version-file: go.mod
          token: ${{ secrets.GITHUB_TOKEN }}
      # https://github.com/marketplace/actions/goreleaser-action
      - if: ${{ hashFiles('.goreleaser.yml') != '' }}
        uses: goreleaser/goreleaser-action@v6
        with:
          args: release --clean --config .goreleaser.yml --skip=validate --skip=announce --skip=publish --snapshot
        env:
          VERSION: ${{ needs.version.outputs.version }}
      - uses: actions/upload-artifact@v4
        with:
          name: build
          # order is important to filter unwanted globs after the filter or desired globs
          path: |
            dist/*
            !dist/*.json
            !dist/*.yaml
            !dist/*/
          retention-days: 1
<<- end >>
<<- end >>
