# Code generated by craft; DO NOT EDIT.

{{- $golang := hasKey .Languages "go" }}
{{- $hugo := hasKey .Languages "hugo" }}
{{- $node := hasKey .Languages "node" }}
{{- $shell := and (not (has "shell" .Exclude)) (gt (len (glob "*.*sh")) 0) }}

{{- $pages := and (.IsDeployment "pages") (or $node $hugo) }}
{{- $netlify := and (.IsDeployment "netlify") (or $node $hugo) }}

---
include:

  # semantic-release template
  - project: to-be-continuous/semantic-release
    ref: "3"
    file: "templates/gitlab-ci-semrel.yml"

{{- if not (has "pre-commit" .Exclude) }}

  # pre-commit template
  - project: to-be-continuous/pre-commit
    ref: "1"
    file: "templates/gitlab-ci-pre-commit.yml"
{{- end }}

{{- if $shell }}

  # Bash template
  - project: to-be-continuous/bash
    ref: "3"
    file: "/templates/gitlab-ci-bash.yml"
{{- end }}

{{- if eq .Bot "renovate" }}

  # Renovate template
  - project: to-be-continuous/renovate
    ref: "1"
    file: "templates/gitlab-ci-renovate.yml"
{{- end }}

{{- if eq .Bot "dependabot" }}

  # Dependabot template
  - project: dependabot-gitlab/dependabot-standalone
    ref: 3.58.0
    file: .gitlab-ci.yml
{{- end }}

{{- if .CI.Docker }}

  # Docker template
  - project: to-be-continuous/docker
    ref: "5"
    file: "templates/gitlab-ci-docker.yml"
{{- end }}

{{- if .CI.Helm }}

  # Helm template
  - project: to-be-continuous/helm
    ref: "8"
    file: "templates/gitlab-ci-helm.yml"
{{- end }}

{{- if $golang }}

  # Go template
  - project: to-be-continuous/golang
    ref: "4"
    file: "templates/gitlab-ci-golang.yml"
{{- end }}

{{- if $node }}

  # Node.js template
  - project: to-be-continuous/node
    ref: "3"
    file: "templates/gitlab-ci-node.yml"
{{- end }}

{{- if has "sonar" .CI.Options }}

  # SonarQube template
  - project: to-be-continuous/sonar
    ref: "4"
    file: "templates/gitlab-ci-sonar.yml"
{{- end }}

variables:
  SEMREL_AUTO_RELEASE_ENABLED: {{ .IsAutoRelease | ternary "$CI_COMMIT_REF_PROTECTED" "false" }}
  SEMREL_BRANCHES_REF: /^(master|main|v[0-9]+\.x|v[0-9]+\.[0-9]+\.x|next|alpha|beta|staging|dev|develop|development)$/
  SEMREL_HOOKS_DIR: scripts
  SEMREL_INFO_ON: all
  SEMREL_RELEASE_DISABLED: "{{ not .CI.Release }}"
  SEMREL_REQUIRED_PLUGINS_FILE: .gitlab/semrel-plugins.txt
  SEMREL_TAG_FORMAT: v$${version}

{{- if not (has "pre-commit" .Exclude) }}

  PRE_COMMIT_FILE: .pre-commit-config.yaml
{{- end }}

{{- if $shell }}

  BASH_SHELLCHECK_FILES: "**/*.(bash|dash|ksh|sh)"
  BASH_BATS_ENABLED: "false"
{{- end }}

{{- if eq .Bot "renovate" }}
{{ if has "renovate:post-upgrade" .Include }}
  RENOVATE_ALLOWED_COMMANDS: /^\.\/scripts\/sh\/renovate\.sh$/
{{- end }}
  RENOVATE_AUTODISCOVER: "true"
  RENOVATE_AUTODISCOVER_FILTER: {{ eq (len .Languages) 0 | ternary "$CI_PROJECT_NAMESPACE" "$CI_PROJECT_PATH" }}
{{- end }}

{{- if eq .Bot "dependabot" }}

  SETTINGS__GITLAB_URL: $CI_SERVER_FQDN
{{- end }}

{{- if .CI.Docker }}
{{- $registry := .CI.Docker.Registry | default "$CI_REGISTRY" }}
{{- $path := .CI.Docker.Path | default "$CI_PROJECT_PATH" }}

  DOCKER_RELEASE_IMAGE: "{{ $registry }}/{{ $path }}:$SEMREL_INFO_NEXT_VERSION"
  DOCKER_SNAPSHOT_IMAGE: "{{ $registry }}/{{ $path }}/snapshot:$SEMREL_INFO_NEXT_VERSION"

  DOCKER_BUILD_TOOL: buildah
  DOCKER_HEALTHCHECK_DISABLED: "true" # https://docs.docker.com/reference/dockerfile/#healthcheck
  DOCKER_BUILD_ARGS: |
    --build-arg GIT_REF_NAME=$CI_COMMIT_REF_NAME
    --build-arg GIT_COMMIT=$CI_COMMIT_SHA
    --build-arg VERSION=$SEMREL_INFO_NEXT_VERSION
    --label org.opencontainers.image.created=$CI_JOB_STARTED_AT
    --label org.opencontainers.image.ref.name=$CI_COMMIT_REF_NAME
    --label org.opencontainers.image.revision=$CI_COMMIT_SHA
    --label org.opencontainers.image.version=$SEMREL_INFO_NEXT_VERSION
  DOCKER_RELEASE_EXTRA_TAGS: latest \\g<major>.\\g<minor> \\g<major
  DOCKER_SBOM_DISABLED: "true" # https://github.com/anchore/syft
  DOCKER_SEMREL_RELEASE_DISABLED: "true" # handled by docker build and push jobs to avoid too much dependency on semantic-release
  DOCKER_TRIVY_ARGS: --ignore-unfixed --exit-code 1 --exit-on-eol 1
  DOCKER_TRIVY_SECURITY_LEVEL_THRESHOLD: MEDIUM,HIGH,CRITICAL
{{- end }}

{{- if .CI.Helm }}
{{- $registry := .CI.Helm.Registry | default "oci://$CI_REGISTRY" }}
{{- $path := .CI.Helm.Path | default "$CI_PROJECT_PATH/charts" }}

  HELM_CHART_DIR: chart/
  HELM_SCRIPTS_DIR: chart/hooks/
  HELM_SEMREL_RELEASE_DISABLED: "true" # version is handled manually
  HELM_TEST_ENABLED: "false"

  HELM_PACKAGE_ARGS: package --version "$SEMREL_INFO_NEXT_VERSION" --app-version "$SEMREL_INFO_NEXT_VERSION" --dependency-update
  HELM_PUBLISH_METHOD: {{ .HasHelmPublish | ternary "push" "disabled" }}
  HELM_PUBLISH_ON: {{ .HasHelmPublish | ternary "all" "none" }}
  HELM_PUBLISH_SNAPSHOT_ENABLED: "false"
  HELM_PUBLISH_STRATEGY: {{ .CI.Helm.Publish | default "none" }}
{{- if .HasHelmPublish }}
  HELM_PUBLISH_URL: {{ $registry }}/{{ trimSuffix (print "/" .ProjectName) $path }}
{{- end }}

{{- if .IsDeployment "kubernetes" }}

  HELM_REVIEW_ENABLED: "true"
  HELM_INTEG_ENABLED: "true"
  HELM_STAGING_ENABLED: "true"
  HELM_PROD_ENABLED: "true"

  HELM_DEPLOY_ARGS: upgrade --install --version "$SEMREL_INFO_NEXT_VERSION" -f "$HELM_CHART_DIR/values.yaml" --set "appVersion=$SEMREL_INFO_NEXT_VERSION"
  HELM_PROD_DEPLOY_STRATEGY: {{ .CI.Deployment.Auto | ternary "auto" "manual" }}

  HELM_INTEG_APP_NAME: $HELM_BASE_APP_NAME
  HELM_REVIEW_APP_NAME: $HELM_BASE_APP_NAME-$SEMREL_INFO_NEXT_VERSION
  HELM_STAGING_APP_NAME: $HELM_BASE_APP_NAME
{{- end }}
{{- end }}

{{- if $node }}

  NODE_AUDIT_DISABLED: "false"
  NODE_BUILD_ARGS: run build --prod
  NODE_IMAGE: registry.hub.docker.com/library/node:lts-alpine
  NODE_LINT_ARGS: "run lint"
  NODE_LINT_ENABLED: "true"
  NODE_OUTDATED_ARGS: --long
  NODE_OUTDATED_DISABLED: "false"
  NODE_PUBLISH_ENABLED: "false"
  NODE_SBOM_DISABLED: "true"
  NODE_SEMGREP_DISABLED: "false" # https://semgrep.dev/docs/
  NODE_TEST_ARGS: test -- --coverage
{{- end }}

{{- if $golang }}

  GO_CI_LINT_ARGS: --config .golangci.yml --timeout 240s --allow-parallel-runners --output.checkstyle.path reports/go-ci-lint.checkstyle.xml --output.text.path stdout
  GO_CI_LINT_IMAGE: registry.hub.docker.com/golangci/golangci-lint:latest-alpine
  GO_IMAGE: registry.hub.docker.com/library/golang:latest
  GO_OUTDATED_DISABLED: "false" # https://github.com/psampaz/go-mod-outdated
  GO_SBOM_DISABLED: "true"
  GO_TEST_FLAGS: -v -coverpkg=./... -covermode=count -timeout=15s
  GO_TEST_IMAGE: registry.hub.docker.com/library/golang:latest
{{- end }}

{{- if has "sonar" .CI.Options }}

  SONAR_BASE_ARGS: |
    -Dsonar.properties=sonar.properties
    -Dsonar.links.homepage=$CI_PROJECT_URL
    -Dsonar.links.ci=$CI_PROJECT_URL/-/pipelines
    -Dsonar.links.issue=$CI_PROJECT_URL/-/issues
  SONAR_QUALITY_GATE_ENABLED: "true"
{{- end }}

semantic-release-info:
  variables:
    GIT_DEPTH: "0"
  after_script:
    - source "$SEMREL_CONFIG_DIR/semrel.out.env" && rm "$SEMREL_CONFIG_DIR/semrel.out.env"
    - >
      echo "BRANCH_SHA=$(echo "$CI_COMMIT_REF_NAME" | sha256sum | cut -c -8)" >> "$SEMREL_CONFIG_DIR/semrel.out.env"

      if [ -n "$SEMREL_INFO_NEXT_VERSION" ]; then
        echo "SEMREL_INFO_LAST_VERSION=v${SEMREL_INFO_LAST_VERSION#v}" >> "$SEMREL_CONFIG_DIR/semrel.out.env"
        echo "SEMREL_INFO_NEXT_VERSION=v${SEMREL_INFO_NEXT_VERSION#v}" >> "$SEMREL_CONFIG_DIR/semrel.out.env"
        echo "SEMREL_INFO_NEXT_VERSION_TYPE=${SEMREL_INFO_NEXT_VERSION_TYPE}" >> "$SEMREL_CONFIG_DIR/semrel.out.env"
      else
        DESCRIBE=$(git describe --tags || echo "v1.0.0")
        echo "SEMREL_INFO_NEXT_VERSION=v${DESCRIBE#v}" >> "$SEMREL_CONFIG_DIR/semrel.out.env"
        echo "SEMREL_INFO_NEXT_VERSION_TYPE=build" >> "$SEMREL_CONFIG_DIR/semrel.out.env"
      fi
    - cat "$SEMREL_CONFIG_DIR/semrel.out.env"

semantic-release:
  variables:
    GIT_DEPTH: "0"

{{- if $golang }}

go-build:
  image: ghcr.io/goreleaser/goreleaser:latest
  rules:
    # https://gitlab.com/to-be-continuous/golang/-/blob/master/templates/gitlab-ci-golang.yml?ref_type=heads#L651
    - if: $GO_TEST_IMAGE != ""
      exists:
        - .goreleaser.yml
  variables:
    VERSION: $SEMREL_INFO_NEXT_VERSION
  script:
    - goreleaser release --clean --config .goreleaser.yml --skip=validate --skip=announce --skip=publish --snapshot
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    paths:
      - dist/
    exclude:
      - dist/*.json
      - dist/*.yaml
      - dist/*/
    expire_in: 1 day
{{- end }}

{{- if $hugo }}
{{- $specifics := get .Languages "hugo" }}

hugo-build:
  image: hugomods/hugo:exts
  stage: build
  variables:
    DIST_FOLDER: dist
  before_script:
    - apk add go
  script:
{{- if $specifics.IsTheme }}
    - [ ! -d exampleSite ] || cd exampleSite
{{- end }}
    - hugo --gc --minify --destination "$CI_PROJECT_DIR/$DIST_FOLDER" --logLevel debug
  artifacts:
    name: $ENV
    paths:
      - $DIST_FOLDER
    expire_in: 1 day
{{- end }}

{{- if eq .Bot "renovate" }}

.renovate-rules: &renovate-rules
  rules:
    # see https://gitlab.com/to-be-continuous/renovate/-/blob/master/templates/gitlab-ci-renovate.yml?ref_type=heads#L348
    # update mode only with schedule triggering
    - if: $CI_PIPELINE_SOURCE == 'schedule'
      variables:
        RENOVATE_DRY_RUN: "false"
    # dry run with web triggering
    - if: $CI_PIPELINE_SOURCE == 'web'

renovate-validator:
  <<: *renovate-rules

renovate-depcheck:
  <<: *renovate-rules
{{- end }}

{{- if $netlify }}

netlify:
  stage: deploy
  image: node:lts-alpine
  environment:
    name: $ENV
    action: start
  variables:
    DIST_FOLDER: dist
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        ARGS: "--prod"
        ENV: production
{{- if not .CI.Deployment.Auto }}
      when: manual
{{- end }}
    - variables:
        ARGS: "--alias $BRANCH_SHA"
        ENV: $CI_COMMIT_REF_NAME
      when: manual
  before_script:
    - npm install -g netlify-cli
  script:
    - netlify deploy --site "$NETLIFY_SITE_ID" --auth "$NETLIFY_AUTH_TOKEN" --dir "$DIST_FOLDER" "$ARGS"
{{- end }}

{{- if $pages }}

pages:
  stage: deploy
  environment:
    name: $ENV
    action: start
    url: $CI_PAGES_URL
  variables:
    ENV: production
    DIST_FOLDER: dist
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
{{- if not .CI.Deployment.Auto }}
      when: manual
{{- end }}
  script:
    - >
      if [ "$DIST_FOLDER" != "public" ]; then
        mkdir -p public
        $DIST_FOLDER/* public
      fi
  artifacts:
    name: $ENV
    paths:
      - public
    expire_in: 1 day
{{- end }}
