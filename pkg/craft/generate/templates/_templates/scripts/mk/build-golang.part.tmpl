{{- define "golang" }}
{{- $specifics := get .Languages "go" }}

{{- if gt .Binaries 0 }}

GOCI_LINT_PATH  ?= .golangci.yml
VERSION         ?= v0.0.0
{{- else }}

GOCI_LINT_PATH ?= .golangci.yml
{{- end }}

.PHONY: reports
reports:
	@mkdir -p reports/

.PHONY: lint
lint: reports
	@golangci-lint run -c ${GOCI_LINT_PATH} --timeout 240s --allow-parallel-runners \
		--output.checkstyle.path "reports/go-ci-lint.checkstyle.xml" \
		--output.text.path stdout $(ARGS) || \
		echo "golangci-lint failed, running 'make lint-fix' may fix some issues"

.PHONY: lint-fix
lint-fix: reports
	@ARGS="--fix" make -s lint

.PHONY: test
test:
	@go test ./... -count 1 -timeout=15s

.PHONY: test-race
test-race:
	@CGO_ENABLED=1 go test ./... -race -timeout=15s

.PHONY: test-cover
test-cover: reports
	@go test ./... -v -coverpkg="./..." -covermode="count" -coverprofile="reports/go-coverage.native.out" -timeout=15s | tee "reports/tests.log"
	@go run github.com/jstemmer/go-junit-report/v2@latest -in "reports/tests.log" -out "reports/go-test.xunit.xml"
	@go tool test2json < "reports/tests.log" > "reports/go-test.native.json"

{{- $binaries := dict }}
{{- $_ := map $binaries .Clis .Crons .Jobs .Workers }}

{{- if eq .Binaries 1 }}
{{- $binary := "" }}
{{- range $name, $config := $binaries }}{{ $binary = $name }}{{ end }}

.PHONY: build
build:
	@CGO_ENABLED=0 go build \
		-ldflags "\
			-X '{{ $specifics.Module }}/internal/build.branch=$(shell git rev-parse --abbrev-ref HEAD)' \
			-X '{{ $specifics.Module }}/internal/build.commit=$(shell git rev-parse HEAD)' \
			-X '{{ $specifics.Module }}/internal/build.date=$(shell TZ="UTC" date '+%Y-%m-%dT%TZ')' \
			-X '{{ $specifics.Module }}/internal/build.version=${VERSION}' \
		" \
		-o {{ $binary }} ./cmd/{{ $binary }}
{{- end }}

{{- if gt .Binaries 1 }}

.PHONY: buildall
buildall:{{ range $name, $config := $binaries }} build-{{ $name }}{{ end }}

.PHONY:{{ range $name, $config := $binaries }} {{ $name }}{{ end }}
build-%:
	@CGO_ENABLED=0 go build \
		-ldflags "\
			-X '{{ $specifics.Module }}/internal/build.branch=$(shell git rev-parse --abbrev-ref HEAD)' \
			-X '{{ $specifics.Module }}/internal/build.commit=$(shell git rev-parse HEAD)' \
			-X '{{ $specifics.Module }}/internal/build.date=$(shell TZ="UTC" date '+%Y-%m-%dT%TZ')' \
			-X '{{ $specifics.Module }}/internal/build.version=${VERSION}' \
		" \
		-o $* ./cmd/$*

.PHONY:{{ range $name, $config := $binaries }} {{ $name }}{{ end }}
local-%:
	@go run ./cmd/$*
{{- end }}

{{- if .Docker }}

.PHONY: docker
docker:
	@docker build . \
		-f Dockerfile \
		-t {{ .ProjectName }}:${VERSION} \
		--build-arg GIT_REF_NAME=$(shell git rev-parse --abbrev-ref HEAD) \
		--build-arg GIT_COMMIT=$(shell git rev-parse HEAD) \
		--build-arg VERSION=${VERSION}
{{- end }}
{{- end }}
